generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(cuid())
  name              String?
  email             String?    @unique
  emailVerified     DateTime?
  password          String?    // For email/password auth
  image             String?    // Avatar
  bio               String?
  username          String?    @unique
  isPublic          Boolean    @default(true)
  theme             String?    // Custom theme
  premium           Boolean    @default(false)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  links             Link[]
  accounts          Account[]
  sessions          Session[]
  feedbacks         Feedback[]
  role              Role       @default(USER)
  analytics         Analytics[]
  stripeCustomerId  String?     // Stripe customer ID for billing
  socialMedia       SocialMedia[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        String
  expires       DateTime
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier    String
  token         String   @unique
  expires       DateTime
  @@unique([identifier, token])
}

model LinkType {
  id    String  @id @default(cuid())
  name  String  @unique // e.g. "website"
  label String          // e.g. "Website"
  color String          // Tailwind class or hex code for UI
  links Link[]
}

model Link {
  id            String        @id @default(cuid())
  userId        String
  title         String
  url           String
  icon          String?
  typeId        String
  type          LinkType      @relation(fields: [typeId], references: [id])
  rotationType  RotationType  @default(always)
  weight        Int?
  scheduleStart DateTime?
  scheduleEnd   DateTime?
  isActive      Boolean       @default(true)
  order         Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  analytics     Analytics[]
  category      String?
  tags          String?
}

model Analytics {
  id          String    @id @default(cuid())
  linkId      String?   // Nullable for page views
  userId      String?   // Optional for analytics
  type        String    // "page_view" or "link_click"
  timestamp   DateTime  @default(now())
  abTestGroup String?
  referrer    String?
  ip          String?
  country     String?
  platform    String?   // New field for social media platform, nullable
  link        Link?     @relation(fields: [linkId], references: [id], onDelete: SetNull)
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Feedback {
  id        String    @id @default(cuid())
  userId    String
  message   String
  response  String?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserConfigs {
  id                      String   @id @default(cuid())
  user_id                 String   @unique
  theme                   String   @default("oceanBreeze")
  font_size               String   @default("medium")
  show_background_pattern Boolean  @default(true)
  updated_at              DateTime @default(now())
}

model SocialMedia {
  id                String   @id @default(cuid())
  user_id           String   @unique
  twitter_url       String?  @default("")
  twitter_visible   Boolean  @default(true)
  facebook_url      String?  @default("")
  facebook_visible  Boolean  @default(true)
  instagram_url     String?  @default("")
  instagram_visible Boolean  @default(true)
  linkedin_url      String?  @default("")
  linkedin_visible  Boolean  @default(true)
  youtube_url       String?  @default("")
  youtube_visible   Boolean  @default(true)
  tiktok_url        String?  @default("")
  tiktok_visible    Boolean  @default(true)
  github_url        String?  @default("")
  github_visible    Boolean  @default(true)
  twitch_url        String?  @default("")
  twitch_visible    Boolean  @default(true)
  bluesky_url       String?  @default("")
  bluesky_visible   Boolean  @default(true)
  updated_at        DateTime @default(now())
  user              User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum RotationType {
  always
  random
  weighted
  scheduled
} 